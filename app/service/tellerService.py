import os
import requests
import logging
from requests.auth import HTTPBasicAuth
from flask import jsonify

class TellerService():

    def __init__(self, access_token=None):
        self._baseLink: str = "https://api.teller.io"
        self._cert: tuple = (os.getenv("CERT_PATH"), os.getenv("KEY_PATH"))
        self._access_token: str = access_token
        self._auth: HTTPBasicAuth
    
    """
        Store access token once Teller Connect generates it
        @param: token generated by Teller Connect
    """
    def storeAccessToken(self, token):
        if token:
            self._access_token = token
            self._auth = HTTPBasicAuth(self._access_token, "")

    """
        Fetch accounts from Teller API
    """
    def fetchAccounts(self):
        try:
            accounts = requests.get(f"{self._baseLink}/accounts", auth=self._auth, cert=self._cert)
            
            if accounts.status_code == 200:
                logging.info("Accounts data successfully retrieved.")
                return accounts.json()
            
        except Exception as e:
            logging.critical("Failed to get accounts")
            logging.critical(e)
            return {"error": "Fetching accounts failed"}
    
    """
        Fetch account balance from Teller API
        @param: account id
    """
    def fetchAccountBalance(self, account_id):   
        try:
            balance = requests.get(f"{self._baseLink}/accounts/{account_id}/balances", auth=self._auth, cert=self._cert)

            if balance.status_code == 200:
                logging.info("Success fetching account balances")
                return balance.json()
            
            else:
                logging.error(f"error code {balance.status_code}\n{balance}")

        except Exception as e:
            logging.error("Error fetching account id balances")
            logging.error(e)
            return {"error": "Fetching account balances failed"}
        
    